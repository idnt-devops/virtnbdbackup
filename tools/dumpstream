#!/usr/bin/python3
"""
    Copyright (C) 2021  Michael Ablassmeier <abi@grinser.de>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""
import os
import sys
sys.path.append('.')
sys.path.append('..')
import json
import argparse
import libvirtnbdbackup.common as common
import libvirtnbdbackup.sparsestream  as sparsestream

if __name__ == "__main__":
    """ Open stream image and dump block offsets
    """
    parser = argparse.ArgumentParser(
        description="Dump backup image block information"
    )
    parser.add_argument(
        "-d", "--dump", required=True, type=str,
        help="Backup file")

    lib = common.Common()
    args = lib.argparse(parser)

    try:
        reader = open(args.dump, "rb")
    except Exception as e:
        print("Unable to open backup file: %s" % e)
        sys.exit(1)

    stream = sparsestream.SparseStream()
    sTypes = sparsestream.SparseStreamTypes()
    kind, start, length = stream.readFrame(reader)
    meta = stream.loadMetadata(reader.read(length))
    assert reader.read(len(sTypes.TERM)) == sTypes.TERM

    dataRanges = []
    while True:
        kind, start, length = stream.readFrame(reader)
        if kind == sTypes.STOP:
            dataRanges[-1]['nextBlockOffset'] = None
            break

        blockInfo = {}
        blockInfo['offset'] = reader.tell()
        blockInfo['originalOffset'] = start
        blockInfo['nextOriginalOffset'] = start+length
        blockInfo['length'] = length
        blockInfo['data'] = (kind == sTypes.DATA)

        if kind == sTypes.DATA:
            reader.seek(length, os.SEEK_CUR)
            assert reader.read(len(sTypes.TERM)) == sTypes.TERM

        nextBlockOffset = reader.tell()+sTypes.FRAME_LEN
        blockInfo['nextBlockOffset'] = nextBlockOffset
        dataRanges.append(blockInfo)

    print(json.dumps(dataRanges, indent=4))
